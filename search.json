[{"title":"Hello World","url":"/2023/02/03/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"软件工程复习提纲","url":"/2023/02/14/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/","content":"注意：（暂未完善）根据来自于大数据专业画的重点，罗列了相关知识点、部分视频链接和习题，时间仓促，难免有小差错，望联系指正！\n\n\n一、题型简答题（30分 5,6个） 分析与设计题（70分）\n\n简答题：都是比较大的概念，软件的定义、过程模型及各个阶段、敏捷开发、构建和模块、耦合与内聚\n分析设计题：比较活，需求分析、识别用例、用例描述、用例叙述、uml设计、建模、画图的元素要对（实线、虚线、形状）、多写字\n\n二、简答题（暂未完善，注意最小必要概念）1.软件的定义\n软件是计算机系统中与硬件相互依存的另一部分，它包括程序、数据、以及其他文档的完整结合。程序是指可完成预期功能和性能的可执行指令序列；数据是程序能够适当处理信息的程序集合；文档是开发、使用、维护程序所用到的图文资料。\n\n2.过程模型及各个阶段\n软件过程模型又叫软件开发模型，它是软件开发全部过程、活动和任务的结构框架。典型的软件过程模型有瀑布模型、增量模型、演化模型（原型模型螺旋模型）、喷泉模型、基于构建的开发模型、形式化方法模型、统一过程模型、敏捷方法等等。\n\n各个阶段：沟通、策划、建模、构建、部署。\n\n\n3.什么是敏捷开发？（第三章）\n总述：以人为核心的、迭代、循序渐进的开发方法。\n\n4.构件和模块（第十章）\n构件\n\n系统中模块化的、可部署的、可替换的部件，该部件封装了实现并对外提供一组接口。\n\n三种构件：控制构件、问题与构件、基础设施构件\n\n设计基于类的基本设计原则：\n\n开闭原则（Open-Cloased Principle，OCP）：模块（构件）应该对外延具有开放性，对修改具有封闭性。\n\nLiskov替换原则：子列可以替换他们的基类。\n\n依赖导致原则：依赖抽象，而非具体实现。\n\n发布/服用等价性原则：复用的粒度就是发布的粒度。\n\n共同封装原则：一同变更的类应该合在一起。\n\n\n\n构件级设计指导方针\n\n构件–确定为体系结构模型的一部分之后建立命名约定。\n\n接口–接口提供关于通信和协作的重要信息。\n\n依赖和继承–继承关系自底（导出类）向上（基类），依赖关系通过接口来实现。\n\n\n\n实施构建级设计\n\nStep1 标识出所有与问题相对应的设计类\n\nStep2 确定所有与基础设施域相对应的类 \n\nStep3 细化所有未作为可复用构件获取的设计类\n\nStep3.1 在类或构件写作时说明信息的细节\n\nStep3.2 为每个构件确定适当的接口\n\nStep3.3 细化属性，并且定义实现属性所需要的的数据类型和数据结构\n\nStep3.4 详细描述每个操作中的操作流\n\n\n\nStep4 描述持久数据源（数据库和文件）并确定管理数据源所需要的类\n\nStep5 开发并且细化类或构件的行为表示\n\nStep6 细化部署图以提供额外的实现细节\n\nStep7 重构每个构件级设计表示，并且总是考虑其他可选方案\n\n\n\n\n\n\n5.耦合与内聚\n耦合主要描述的是模块与模块之间的关系，内聚则主要描述的是单个模块的内部构成。\n\n内聚：构件只封装那些像话关联密切，以及与构建或类自身有密切关系的属性和操作。\n\n耦合：类之间彼此联系程度的一种定性度量。   \n\n\n三、分析设计题（暂未完善）比较活，需求分析、识别用例、用例描述、用例叙述、uml设计、建模、画图的元素要对（实线、虚线、形状）、多写字\n\n用例图\n\nbilibili视频\n\n\n活动图(用来补充用例图中的活动P105)\n\nbilibili视频\n\n\n类图\n\n高质量英文版  【有翻译】10 分钟学会 UML 类图（UML Class Diagram Tutorial）_哔哩哔哩_bilibili\n\n中文视屏，质量相对不高bilibili视频（包含了用例图、时序图和类图）\n\n\n\n状态图(分析类图中的类的状态)\n\n知乎文章\n\n6_状态图_统一建模语言UML急性入门_哔哩哔哩_bilibili\n\n\n\n时序图\n\nbilibili视频\n\n\nUI设计\n\n\n四、补充一些简答题（未完善）1.软件生命周期都包含哪些阶段，并简述每个阶段的基本任务\n（一）问题定义\n\n关键任务：“要解决的问题是什么”\n问题定义报告（文档）：通过对客户的访问调查，系统分析员扼要地写出关于问题性质、目标工程和工程规模的书面报告\n经过讨论和必要修改之后这份报告必须应得到客户的确认。\n\n（二）可行性研究\n\n关键任务：回答关键问题是：“对于上一个阶段所确定的问题有行的通的解决办法吗？”\n在较抽象的高层次上进行的分析和设计过程。\n目的：是客户作出是否继续进行这项工程的决定的重要依据\n要求：应该比较简短\n可行性研究报告（文档）：经济（成本效益）、技术（技术可行）、社会（操作公共安全社会道德）\n项目开发计划（文档）：粗略\n\n（三）需求分析\n\n关键任务：目标系统必须做什么\n目的：完整、准确、清晰、具体的建立系统逻辑模型，是以后设计和实现目标系统的基础。\n要求：必须准确完整地体现用户的需求\n需求规格说明书（重要文档）：目标系统需求、最重要的一份文档、软件所有需要做什么、最终用户验收拿此文档比较\n\n（四）总体设计\n\n关键任务：怎样实现目标系统\n根据需求设计方案，分析推荐最佳方案，设计软件结构等。\n设计程序的体系结构，月就是确定程序有哪些模块组成以及模块之间的关系\n总体设计说明书（文档）：记录总体设计结果\n\n（五）详细设计\n\n关键任务：该怎样具体实现系统？\n设计每个模块的算法和数据结构\n详细设计说明书（文档）：用适当表达工具表达算法和数据结构\n\n（六）编码和单元测试\n\n关键任务:选择语言、工具翻译详细设计结果、测试模块\n实现阶段文档：\n1、程序清单\n2、单元测试报告\n\n\n\n（七）综合测试\n\n关键任务：通过各类型的测试（及相应的调试）是软件达到预定要求\n测试报告（文档）：测试计划、测试方案、测试结果\n\n（八）软件维护\n\n关键任务：通过各种必要的维护活动使系统持久地满足用户的需求\n\n维护类型：\n\n1、改正性维护：软件运行过程中发现错误进行维护\n\n2、适应性维护：软件运行软件硬件环境变化进行的维护\n\n3、完善性维护：用户要求改进或扩充软件进行的维护\n\n4、预防性维护：为将来的维护作准备\n\n\n\n\n\n2.硬性软件可维护性的7个因素\n可理解性：软件的可理解性是指通过阅读源代码和相关文档，了解软件的功能和如何运行的容易程度。\n可测试性：软件的可测试性是指验证软件程序正确的难易程度。\n可修改性：软件的可修改性是指修改软件的难易程度。高内聚，低耦合\n可靠性：一个软件的可靠性越高，需要维护的概率就会越低。\n可移植性：软件运行环境的变化是软件维护的一种常见情形，可移植性好的软件会降低维护的概率。\n可使用性：软件的可使用性是指用户使用软件的难易程度。\n效率：效率是指软件既能很好地完成用户期望的功能、性能，又不浪费机器资源的程度。\n\n五、相关习题(点击下载或查看)软工往年试题2018-2019年.pdf\n \n\n\t\n    \n\t\n\n\n \n(点击下载或查看)软工往年试题2020-2021年.pdf\n \n\n\t\n    \n\t\n\n\n \n","categories":["考试复习"],"tags":["考试复习","软件工程"]},{"title":"计算机网络复习提纲","url":"/2023/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/","content":"\n注释：根据软工的画的重点，罗列了相关知识点和部分习题，时间仓促，难免有小差错，望联系指正！\n\n也可在幕布中查看，幕布链接：https://www.mubucm.com/doc/gN0wTNW3C\n\n1.熟记知识点\n\n原图\n\n\n\n\n1.三种数据交换方式\n\n答：电路交换、 报文交换、分组交换\n\n\n2.计算机网络的定义\n\n答：一些互相连接的、自治的计算机的集合\n\n\n3.计算机网络类型\n\n按照作用范围：广域网、城域网、局域网、个人区域网\n\n按照网络的使用者：公用网、专用网。\n\n\n\n4.网络的性能指标\n\n速率：也称数据率或者比特率，单位bps；\n\n带宽：最高速率，单位bps；\n\n时延：包含发送时延、传播时延、处理时延、排队时延；\n\n往返时间：强调发送方至少要经过这么长的时间，才可以知道自己所发送的数据被对方接收了（计算有效数据率）；\n\n利用率：利用率增加会导致时延的增加。（高速公路的流量很大的时候排队时延也会增加）\n\n\n\n5.网络协议的三要素#已完善 \n\n定义：为进行网络中的数据交换而建立的规则、标准或者约定称为网络协议；\n\n三要素：\n\n语法（数据和控制信息的结构和格式）\n\n语义（需要发出何种控制信息、完成何种动作、以及作出何种反应）\n\n同步（事件实现顺序的详细说明）\n\n\n\n\n\n6.五层协议模型以及各层的功能#已完善 \n\n应用层：通过应用进程间的交互来完成特定网络应用。DNS、SMTP、HTTP等；\n\n运输层：负责向两台主机中进程之间的通信提供通用的数据传输服务；TCP、UDP等；\n\n网络层：负责为分组交换网上的不同主机提供通信服务。\n\n数据链路层：将网络层传输下来的IP数据报组装成帧，在两个相邻节点间的链路传输帧；\n\n物理层：透明地传输比特流；\n\n\n\n7.数据传输模式#已完善 \n\n若按数据传输的顺序可以分为并行传输和串行传输；\n\n若按数据传输的同步方式可分为同步传输和异步传输；\n\n若按数据传输的流向和时间关系可以分为单工、半双工和全双工数据传输。\n\n\n\n8.比特率和波特率#已完善 \n\n一个码元并不一定对应一个比特。\n\n波特率：是码元传输速率单位，他说明单位时间传输了多少个码元。Baud/s\n\n比特率：是信息量传送速率单位，即每秒传输二进制代码位数。bit/s\n\n\n\n9.奈奎斯特准则、香农公式\n\n奈奎斯特准则：在带宽为W（Hz）的低通信道中，若不考虑噪声干扰，则码元的最高速率是2W（码元每秒）。传输速率超过此上限，就会出现严重的码间串扰，使接收端对码元的判决（识别）成为不可能。\n\n习题\n\n\n香农公式：C=W*log_2(1+S/N) \n\n\n\n10.信道复用技术#已完善 \n\n频分复用（FDM）：使用调制的方法，把各路信号搬到适当的频率位置，彼此之间不产生干扰；各路信号在同样的时间占用不同的带宽资源。\n\n习题\n\n\n时分复用（TDM）：将时间划分成一段段等长的TDM帧，每路信号占用TDM中一个序号固定的时隙，每路信号所占用的时隙周期性的出现；各路信号在不同的时间使用同样的频带宽度。\n\n统计时分复用（STDM）：为提高线路资源的利用率提出了统计时分复用，这是一种改进了的时分复用，每个STDM帧的时隙动态分配，并且小于连接在集中器上的用户数\n\n波分复用（WDM）：光的频分复用；各路信号在同样的时间里占用不同的波长资源。\n\n码分复用（CDM）：每个比特时间再划分成m个短的间隔，每个站分配相互正交的码片序列，当发送数据1时候就发送码片序列的源码，否则就发送码片序列的反码。某站T想要接收来自站点S的信号，T所接受信号是各个站所发送的码片序列之和，根据叠加定理，求规格化内积得到的结果是：所有其他站的信号都被过滤掉，而只剩下S站所发送的信号。当S站发送的是比特1时，内积结果是+1；当S站发送的是比特0时，内积结果是-1；\n\n习题\n\n\n\n\n11.停止-等待协议的工作原理#已完善 \n\n教材P220 5.4 可靠传输的工作原理\n\n停止等待就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。\n\n三种情况\n\n无差错情况：发送完一个分组之后，停止发送，在收到接收方发来的确认后，再继续发送。\n\n出现差错情况：两种出错状况：分组丢失或者分组出错。这种情况接收方不进行任何操作。发送方的超时计时器超时之后，对此分组进行超时重传。\n\n要注意：1.发送方需要暂时保留分组的副本，当收到确认之后才将其删除。\n\n2.分组和确认分组都必须进行编号，明确分组是否收到了确认。\n\n3.超时计时器设置的重传时间应当比数据在分组中传输的平均往返时间要长。\n\n\n\n确认丢失和确认迟到\n\n发送方在设定的时间内没有收到确认，此时无法得知是分组丢失、差错，或者是接收方的确认丢失或者超时。此时发送方将分组进行重发。\n\n接收方二次收到这个分组后，采取以下两个动作：1.丢弃这个分组，并且不在向上层进行交付；2.向A发送确认。\n\n发送方在收到二次确认之后，收下就丢弃，什么也不做。\n\n\n\n\n\n基于上述的确认的确认和重传机制。我们就可以在不可靠的传输网络上实现可靠的通信。这种可靠传输协议尝尝被称为自动重传请求（ARP）。\n\n上述的协议有一个很大的缺点就是：信道的利用率太低。基于此，提出了连续ARQ协议，或称为滑动窗口协议\n\n位于发送方的滑动窗口内的分组都可以连续发送出去，并且在收到一个分组的时候，滑动窗口向前移动一个分组。但是接收方一般采用连续确认的方式，好处是接收方不必逐个发送确认，但是在中间的分组丢失时候会将前面已经接收成功的分组再次发送一遍（回退 Go back N）。\n\n\n\n12.IP地址分类编址，A、B、C网络数量和主机数量，IP地址的规则，子网掩码，子网划分，子网数量#需要再次复习 \n\n网络数量和主机数量：\n\nA类：网络位是8位（第一位固定为0，后7位全0表示本网络；后7位全1表示环回测试，用来给本机的进程之间的通信用，总共可以表示2^7-2个网络号），主机位是24位（全0表示网络地址，全1表示该网络上的所有主机号（广播地址），共2^24-2个地址）1-126\n\nB类：网络号是16位（前两位固定为10，B类地址共有2^14个，主机号有2^16-2个）128.000–191.255\n\nC类：网络号是32位（前三位固定为110，C类地址共有2^30个，主机号有2^8-2=126个）192.0.0-223.255.255\n\nD类：网络号前面4位是1110，后面用作多播地址；\n\nE类：网络号前面4位是1111，后面保留今后使用；\n\n\n\nIP地址的规则\n\n网络号加主机号，分类如上\n\n\n子网划分：在主机号中插入一个子网号，变成一个三级IP地址。\n\n子网掩码又称地址掩码，由一连串1和一连串0构成，1的长度就是网络前缀的长度\n\n子网数量:2的子网掩码0的个数幂。\n\nIP地址的特点：\n\n1.每一个IP地址都有网络前缀和主机号两部分组成；\n\n2.实际上IP地址是标志一台主机（或路由器）和一条链路的接口；\n\n3.用转发器或交换机连接起来的若干局域网仍然为一个网络。\n\n4.所有分配到网络前缀的网络都是平等的。\n\n\n\n\n\n13.邮件收发协议 #看到这 \n\n考点 ：SMTP和POP3分别运用在什么情况？\n\n参考回答\n\n源自：P329 倒数第3点\n\n从用户代理把邮件传送到邮件服务器，以及在邮件服务器之间的传送，都要使用SMTP协议。但用户代理从邮件服务器读取邮件时，则要使用POP3协议。\n\n\n\n相关的知识点\n\n一个电子邮件系统应该具有三部分组成：用户代理、邮件服务器、以及邮件发送协议（STMP，Simple Mail Transfer Protocol ）和邮件读取协议（POP3，Post Office Protocol - Version 3，邮局协议版本3）\n\nSMTP和POP3都是使用TCP来传输邮件的，使用TCP的目的是为了可靠地传送邮件。\n\n示意图：\n\n\n\n\n\n\n\n14.协议和服务有何区别？有何关系？#已完善 \n\n协议是控制对等实体之间的通信的规则，是水平的。服务是下层通过层间接口向上层提供的功能，是垂直的。\n\n协议的实现保证了能够向上一层提供服务，要实现本层协议还需要使用下层提供的服务\n\n\n\n15.直接交付和间接交付各用在什么场合？\n\n直接交付：分组的终点和分组的发送接口在同一个IP网络中；\n\n间接交付：分组的终点和分组的发送接口在不同的IP网络中；\n\n判别：终点IP和发送端掩码、发送端IP和发送端掩码分别做位与运算，看结果是否相同，如果相同，则为直接交付；否则为间接交付。\n\n交付操作：地址映射：IP地址 —&gt; 物理地址。这里要用到ARP（地址解析协议：知道IP地址，解析得到MAC地址）\n\n\n\n16.请简要描述TCP运输连接中的三个阶段。#已完善 \n\n一共三个阶段：连接建立、数据传送、连接释放。\n\n主动发起TCP连接建立的应用进程叫做客户，而被动等待连接建立的应用进程的叫做服务器。\n\n连接建立：\nTCP的连接建立采用三报文握手机制。服务器要确认客户的连接请求，然后客户要对服务器的确认进行确认。\n\n示意图\n\n主要解决以下三个问题：使每一方能够确知对方的存在；允许双方协商一些参数（如最大窗口值，是否使用窗口扩大选项和时间戳选项）；能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。\n\n三报文握手建立TCP连接\n\n\n\n数据传送\n\n连接释放：\nTCP的连接释放采用四报文握手机制。任何一方都可以在数据传送结束后发出连接释放的请求，对方确认后进入半关闭状态。当另外一方也没有数据要发送的时候，则发送连接释放通知，对方确认后就完全关闭了TCP连接。\n\n示意图\n\n\n\n\n17.简述分组交换的特点和不足。#已完善 \n\n特点：\n\n1.节点暂时存储的是一个个分组，而不是整个数据文件；\n\n 2.分组暂时保存在节点的内存中，保证了较高的交换速率；\n\n 3.动态分配信道，极大的提高了通信线路的利用率。 \n\n\n\n不足：\n\n 1.分组在节点转发时因排队造成一定的延时\n\n2.分组必须携带一些控制信息而产生额外开销，管理控制比较困难\n\n\n\n拓展–分组交换的要点：\n\n存储转发、分段重组、独立选路。\n\n思路：如何分组（报文、等长数据块、控制信息）如何独立选路（源\\目的地址、独立选择控制路径） 如何存储转发（路由器功能、查找转发表、多次存储转发、交付目的主机） 如何重组（目的主机完成分段重组、还原成为原始报文）\n\n\n\n\n\n18.根据接受到的信息以及生成多项式判断该码是否误码#已完善 \n\n教材P76\n\n循环冗余检验，CRC：把收到的每一个帧都除以同样的除数P（模2运算），然后检查得到的余数R。如果余数不为0则误码。\n\n一般用生成多项式P(x)来表示P，广泛使用的生成多项式有这几种：CRC-16、CRC-CCITT、CRC-32\n\n学习通相关例题：\n\n图片\n\n\n余数的计算：\n\n图片\n\n\n\n\n19.已经各站点ABC通过CDMA共享电路，站点的码片序列分别已经（正交）。若某站点C从电路上收到的序列，则C收到其他站点发送的数据。#已完善 \n\nCDMA： Code Division Multiplexing Access 码分多址，具体见到第10点：码分复用\n\n相关题目\n\n解答参考\n\n\n\n20.拥塞控制协议（四种算法）\n\n教材P241 TCP的拥塞控制方法/P243 变化图\n\n共有四种：慢开始（窗口数加倍）、拥塞避免（窗口数自加一）、快重传（3-ACK后–说明丢包了，被丢失的包立即进行重传）、快恢复（快重传后启动快恢复，窗口值变为原来的一半，之后执行拥塞避免算法）\n\n\n\n\n\n\n","categories":["考试复习"],"tags":["考试复习","计算机网络"]},{"title":"ChatGPT API初探","url":"/2023/03/29/ChatGPT%20API%E5%88%9D%E6%8E%A2/","content":"\n提示：本文图片比较多，记录了调用openai api的遇到的问题，以及几种ChatGPT几种模型的比较（GPT3.0、GPT3.5以及前不久刚出的GPT4.0都有测试到。欢迎共同学习交流！）\n\n\n\n1.尝试跑一下预训练模型\n先是注册API key在PyCharm IDE运行调用openai api，在挂了daili的情况下依然没有反应：（再后来，C盘红了…）\n\n\n\n换用百度BML CodeLAB云平台，但是模型下载太慢了，也没有找到合适的镜像，所以好像也行不通。\n\n\n\n那就向ChatGPT求助吧，它提示我可以换用Google Colaboratory，之后用了果然香！\n\n\n\n\n比如这nb的下载速度！（可是找的模型参数还是太大了，内存耗尽跑不了。其实也能跑，但是要出钱租算力，寄，就此作罢）\n\n\n（上面的预训练模型跑通和部署干不了，下面就只能调用openai 的api玩玩，并把几代gpt模型测试比较了。）\n\n\n2.在Google Colaboratory上调用open ai接口2.1准备Prompt（提示词），这里主要测试英文语料\nCan you recommend some delicious Chinese food?More detailed things is better.\n\n2.2调用模型【下面截图来自官网】\n\n2.3基于text-davinci-002（就较它GPT2.0吧~）2.4基于text-davinci-003（GPT3.0）\n2.5基于gpt-3.5-turbo（GPT3.5，目前能免费在网页端用到的就是这个)\n2.6基于gpt-3.5-turbo（GPT3.5，这次用的是中文提示词)\n2.7和网页端相同问题作比较（GPT3.5，网页端）\n2.8和网页端相同问题作比较（GPT4，目前api端使用有限制，网页端充会员可以使用）\n（可以看到针对此问题，相较于GPT3.5，GPT4的回答不仅文本更长，并且在结构上更美观，内容方面也更加细节了）。\n下一步工作：\n寻找参数合适的模型在本地跑通；\n尝试训练或者调教（貌似难度有点大，说不定有大佬看到这里就给我推荐相关教程嘿嘿）\n\n相关链接：Openai api文档：Models - OpenAI API\nHuggingface GPT模型链接: Huggingface GPT Model\nGoogle Colaboratory：Google Colaboratory\nChatGPT链接：ChatGPT\n","categories":["技术类"],"tags":["ChatGPT"]}]