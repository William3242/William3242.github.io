<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-15T12:05:40.707Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程复习提纲</title>
    <link href="http://example.com/2023/02/14/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://example.com/2023/02/14/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2023-02-14T09:06:54.000Z</published>
    <updated>2023-02-15T12:05:40.707Z</updated>
    
    <content type="html"><![CDATA[<p>注意：（暂未完善）根据来自于大数据专业画的重点，罗列了相关知识点、部分视频链接和习题，时间仓促，难免有小差错，望联系指正！</p><span id="more"></span><h2 id="一、题型"><a href="#一、题型" class="headerlink" title="一、题型"></a>一、题型</h2><p>简答题（30分 5,6个） 分析与设计题（70分）</p><ol><li>简答题：都是比较大的概念，软件的定义、过程模型及各个阶段、敏捷开发、构建和模块、耦合与内聚</li><li>分析设计题：比较活，需求分析、识别用例、用例描述、用例叙述、uml设计、建模、画图的元素要对（实线、虚线、形状）、多写字</li></ol><h2 id="二、简答题（暂未完善，注意最小必要概念）"><a href="#二、简答题（暂未完善，注意最小必要概念）" class="headerlink" title="二、简答题（暂未完善，注意最小必要概念）"></a>二、简答题（暂未完善，注意最小必要概念）</h2><h3 id="1-软件的定义"><a href="#1-软件的定义" class="headerlink" title="1.软件的定义"></a>1.软件的定义</h3><ul><li>软件是计算机系统中与硬件相互依存的另一部分，它包括程序、数据、以及其他文档的完整结合。程序是指可完成预期功能和性能的可执行指令序列；数据是程序能够适当处理信息的程序集合；文档是开发、使用、维护程序所用到的图文资料。</li></ul><h3 id="2-过程模型及各个阶段"><a href="#2-过程模型及各个阶段" class="headerlink" title="2.过程模型及各个阶段"></a>2.过程模型及各个阶段</h3><ul><li><p>软件过程模型又叫软件开发模型，它是软件开发全部过程、活动和任务的结构框架。典型的软件过程模型有瀑布模型、增量模型、演化模型（原型模型螺旋模型）、喷泉模型、基于构建的开发模型、形式化方法模型、统一过程模型、敏捷方法等等。</p></li><li><p>各个阶段：沟通、策划、建模、构建、部署。</p></li></ul><h3 id="3-什么是敏捷开发？（第三章）"><a href="#3-什么是敏捷开发？（第三章）" class="headerlink" title="3.什么是敏捷开发？（第三章）"></a>3.什么是敏捷开发？（第三章）</h3><ul><li>总述：以人为核心的、迭代、循序渐进的开发方法。</li></ul><h3 id="4-构件和模块（第十章）"><a href="#4-构件和模块（第十章）" class="headerlink" title="4.构件和模块（第十章）"></a>4.构件和模块（第十章）</h3><ul><li><p>构件</p><ul><li><p>系统中模块化的、可部署的、可替换的部件，该部件封装了实现并对外提供一组接口。</p></li><li><p>三种构件：控制构件、问题与构件、基础设施构件</p></li><li><p>设计基于类的基本设计原则：</p><ul><li><p>开闭原则（Open-Cloased Principle，OCP）：模块（构件）应该对外延具有开放性，对修改具有封闭性。</p></li><li><p>Liskov替换原则：子列可以替换他们的基类。</p></li><li><p>依赖导致原则：依赖抽象，而非具体实现。</p></li><li><p>发布/服用等价性原则：复用的粒度就是发布的粒度。</p></li><li><p>共同封装原则：一同变更的类应该合在一起。</p></li></ul></li><li><p>构件级设计指导方针</p><ul><li><p>构件–确定为体系结构模型的一部分之后建立命名约定。</p></li><li><p>接口–接口提供关于通信和协作的重要信息。</p></li><li><p>依赖和继承–继承关系自底（导出类）向上（基类），依赖关系通过接口来实现。</p></li></ul></li><li><p>实施构建级设计</p><ul><li><p>Step1 标识出所有与问题相对应的设计类</p></li><li><p>Step2 确定所有与基础设施域相对应的类 </p></li><li><p>Step3 细化所有未作为可复用构件获取的设计类</p><ul><li><p>Step3.1 在类或构件写作时说明信息的细节</p></li><li><p>Step3.2 为每个构件确定适当的接口</p></li><li><p>Step3.3 细化属性，并且定义实现属性所需要的的数据类型和数据结构</p></li><li><p>Step3.4 详细描述每个操作中的操作流</p></li></ul></li><li><p>Step4 描述持久数据源（数据库和文件）并确定管理数据源所需要的类</p></li><li><p>Step5 开发并且细化类或构件的行为表示</p></li><li><p>Step6 细化部署图以提供额外的实现细节</p></li><li><p>Step7 重构每个构件级设计表示，并且总是考虑其他可选方案</p></li></ul></li></ul></li></ul><h3 id="5-耦合与内聚"><a href="#5-耦合与内聚" class="headerlink" title="5.耦合与内聚"></a>5.耦合与内聚</h3><ul><li><p>耦合主要描述的是模块与模块之间的关系，内聚则主要描述的是单个模块的内部构成。</p></li><li><p>内聚：构件只封装那些像话关联密切，以及与构建或类自身有密切关系的属性和操作。</p></li><li><p>耦合：类之间彼此联系程度的一种定性度量。   </p></li></ul><h2 id="三、分析设计题（暂未完善）"><a href="#三、分析设计题（暂未完善）" class="headerlink" title="三、分析设计题（暂未完善）"></a>三、分析设计题（暂未完善）</h2><p>比较活，需求分析、识别用例、用例描述、用例叙述、uml设计、建模、画图的元素要对（实线、虚线、形状）、多写字</p><ul><li><p>用例图</p><ul><li><a class="link"   href="https://www.bilibili.com/video/BV1QC4y1H7n8/?spm_id_from=333.788.recommend_more_video.5" >bilibili视频<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>活动图(用来补充用例图中的活动P105)</p><ul><li><a class="link"   href="https://www.bilibili.com/video/BV19Z4y1p7Eq?from=search&seid=4160133892591307894&spm_id_from=333.337.0.0" >bilibili视频<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>类图</p><ul><li><p><a class="link"   href="https://www.bilibili.com/video/BV1P741127u7/?spm_id_from=333.337.search-card.all.click&vd_source=c37d10e56c2ac111cf8224cb240a8724" >高质量英文版<i class="fas fa-external-link-alt"></i></a>  <a class="link"   href="https://www.bilibili.com/video/BV1P741127u7/?spm_id_from=333.337.search-card.all.click&vd_source=c37d10e56c2ac111cf8224cb240a8724" >【有翻译】10 分钟学会 UML 类图（UML Class Diagram Tutorial）_哔哩哔哩_bilibili<i class="fas fa-external-link-alt"></i></a></p></li><li><p>中文视屏，质量相对不高<a class="link"   href="https://www.bilibili.com/video/BV1co4y197MR?from=search&seid=8897146059100080411&spm_id_from=333.337.0.0" >bilibili视频（包含了用例图、时序图和类图）<i class="fas fa-external-link-alt"></i></a></p></li></ul></li><li><p>状态图(分析类图中的类的状态)</p><ul><li><p><a class="link"   href="https://zhuanlan.zhihu.com/p/78051066" >知乎文章<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://www.bilibili.com/video/BV1YR4y1A7Mr/?spm_id_from=333.337.search-card.all.click&vd_source=c37d10e56c2ac111cf8224cb240a8724" >6_状态图_统一建模语言UML急性入门_哔哩哔哩_bilibili<i class="fas fa-external-link-alt"></i></a></p></li></ul></li><li><p>时序图</p><ul><li><a class="link"   href="https://www.bilibili.com/video/BV1nV411C7gC/?spm_id_from=333.788.recommend_more_video.3" >bilibili视频<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>UI设计</p></li></ul><h2 id="四、补充一些简答题（未完善）"><a href="#四、补充一些简答题（未完善）" class="headerlink" title="四、补充一些简答题（未完善）"></a>四、补充一些简答题（未完善）</h2><h3 id="1-软件生命周期都包含哪些阶段，并简述每个阶段的基本任务"><a href="#1-软件生命周期都包含哪些阶段，并简述每个阶段的基本任务" class="headerlink" title="1.软件生命周期都包含哪些阶段，并简述每个阶段的基本任务"></a>1.软件生命周期都包含哪些阶段，并简述每个阶段的基本任务</h3><blockquote><p><strong>（一）问题定义</strong></p><ul><li>关键任务：“要解决的问题是什么”</li><li>问题定义报告（文档）：通过对客户的访问调查，系统分析员扼要地写出关于问题性质、目标工程和工程规模的书面报告</li><li>经过讨论和必要修改之后这份报告必须应得到客户的确认。</li></ul><p><strong>（二）可行性研究</strong></p><ul><li>关键任务：回答关键问题是：“对于上一个阶段所确定的问题有行的通的解决办法吗？”</li><li>在较抽象的高层次上进行的分析和设计过程。</li><li>目的：是客户作出是否继续进行这项工程的决定的重要依据</li><li>要求：应该比较简短</li><li>可行性研究报告（文档）：经济（成本效益）、技术（技术可行）、社会（操作公共安全社会道德）</li><li>项目开发计划（文档）：粗略</li></ul><p><strong>（三）需求分析</strong></p><ul><li>关键任务：目标系统必须做什么</li><li>目的：完整、准确、清晰、具体的建立系统逻辑模型，是以后设计和实现目标系统的基础。</li><li>要求：必须准确完整地体现用户的需求</li><li>需求规格说明书（重要文档）：目标系统需求、最重要的一份文档、软件所有需要做什么、最终用户验收拿此文档比较</li></ul><p><strong>（四）总体设计</strong></p><ul><li>关键任务：怎样实现目标系统</li><li>根据需求设计方案，分析推荐最佳方案，设计软件结构等。</li><li>设计程序的体系结构，月就是确定程序有哪些模块组成以及模块之间的关系</li><li>总体设计说明书（文档）：记录总体设计结果</li></ul><p><strong>（五）详细设计</strong></p><ul><li>关键任务：该怎样具体实现系统？</li><li>设计每个模块的算法和数据结构</li><li>详细设计说明书（文档）：用适当表达工具表达算法和数据结构</li></ul><p><strong>（六）编码和单元测试</strong></p><ul><li>关键任务:选择语言、工具翻译详细设计结果、测试模块</li><li>实现阶段文档：<ul><li>1、程序清单</li><li>2、单元测试报告</li></ul></li></ul><p><strong>（七）综合测试</strong></p><ul><li>关键任务：通过各类型的测试（及相应的调试）是软件达到预定要求</li><li>测试报告（文档）：测试计划、测试方案、测试结果</li></ul><p><strong>（八）软件维护</strong></p><ul><li><p>关键任务：通过各种必要的维护活动使系统持久地满足用户的需求</p></li><li><p>维护类型：</p><ul><li><p>1、改正性维护：软件运行过程中发现错误进行维护</p></li><li><p>2、适应性维护：软件运行软件硬件环境变化进行的维护</p></li><li><p>3、完善性维护：用户要求改进或扩充软件进行的维护</p></li><li><p>4、预防性维护：为将来的维护作准备</p></li></ul></li></ul></blockquote><h3 id="2-硬性软件可维护性的7个因素"><a href="#2-硬性软件可维护性的7个因素" class="headerlink" title="2.硬性软件可维护性的7个因素"></a>2.硬性软件可维护性的7个因素</h3><blockquote><p>可理解性：软件的可理解性是指通过阅读源代码和相关文档，了解软件的功能和如何运行的容易程度。</p><p>可测试性：软件的可测试性是指验证软件程序正确的难易程度。</p><p>可修改性：软件的可修改性是指修改软件的难易程度。高内聚，低耦合</p><p>可靠性：一个软件的可靠性越高，需要维护的概率就会越低。</p><p>可移植性：软件运行环境的变化是软件维护的一种常见情形，可移植性好的软件会降低维护的概率。</p><p>可使用性：软件的可使用性是指用户使用软件的难易程度。</p><p>效率：效率是指软件既能很好地完成用户期望的功能、性能，又不浪费机器资源的程度。</p></blockquote><h2 id="五、相关习题"><a href="#五、相关习题" class="headerlink" title="五、相关习题"></a>五、相关习题</h2><p><a class="link"   href="https://william3242.github.io/file/%E8%BD%AF%E5%B7%A5%E5%BE%80%E5%B9%B4%E8%AF%95%E9%A2%982018-2019%E5%B9%B4.pdf" >(点击下载或查看)软工往年试题2018-2019年.pdf<i class="fas fa-external-link-alt"></i></a></p><p><br> <div class="row">    <embed src="https://william3242.github.io/file/软工往年试题2018-2019年.pdf" width="100%" height="550" type="application/pdf"></div> <br></p><p><a class="link"   href="https://william3242.github.io/file/%E8%BD%AF%E5%B7%A5%E5%BE%80%E5%B9%B4%E8%AF%95%E9%A2%982020-2021%E5%B9%B4.pdf" >(点击下载或查看)软工往年试题2020-2021年.pdf<i class="fas fa-external-link-alt"></i></a></p><p><br> <div class="row">    <embed src="(https://william3242.github.io/file/软工往年试题2021-2022年.pdf" width="100%" height="550" type="application/pdf"></div> <br></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意：（暂未完善）根据来自于大数据专业画的重点，罗列了相关知识点、部分视频链接和习题，时间仓促，难免有小差错，望联系指正！&lt;/p&gt;</summary>
    
    
    
    <category term="考试复习" scheme="http://example.com/categories/%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="考试复习" scheme="http://example.com/tags/%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    <category term="软件工程" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络复习提纲</title>
    <link href="http://example.com/2023/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://example.com/2023/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2023-02-02T19:11:50.000Z</published>
    <updated>2023-02-14T09:08:03.583Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>注释：根据软工的画的重点，罗列了相关知识点和部分习题，时间仓促，难免有小差错，望联系指正！</p><span id="more"></span></li><li><p>也可在幕布中查看，幕布链接：<a class="link"   href="https://www.mubucm.com/doc/gN0wTNW3C" >https://www.mubucm.com/doc/gN0wTNW3C<i class="fas fa-external-link-alt"></i></a></p></li><li><p>1.熟记知识点</p><ul><li><p>原图</p><ul><li><img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/c896262d-b118-4901-8207-ee8943ae0aae-14724662.jpg"                      alt="img"                ></li></ul></li><li><p>1.三种数据交换方式</p><ul><li>答：电路交换、 报文交换、分组交换</li></ul></li><li><p>2.计算机网络的定义</p><ul><li>答：一些互相连接的、自治的计算机的集合</li></ul></li><li><p>3.计算机网络类型</p><ul><li><p>按照作用范围：广域网、城域网、局域网、个人区域网</p></li><li><p>按照网络的使用者：公用网、专用网。</p></li></ul></li><li><p>4.网络的性能指标</p><ul><li><p>速率：也称数据率或者比特率，单位bps；</p></li><li><p>带宽：最高速率，单位bps；</p></li><li><p>时延：包含发送时延、传播时延、处理时延、排队时延；</p></li><li><p>往返时间：强调发送方至少要经过这么长的时间，才可以知道自己所发送的数据被对方接收了（计算有效数据率）；</p></li><li><p>利用率：利用率增加会导致时延的增加。（高速公路的流量很大的时候排队时延也会增加）</p></li></ul></li><li><p>5.网络协议的三要素#已完善 </p><ul><li><p>定义：为进行网络中的数据交换而建立的规则、标准或者约定称为网络协议；</p></li><li><p>三要素：</p><ul><li><p>语法（数据和控制信息的结构和格式）</p></li><li><p>语义（需要发出何种控制信息、完成何种动作、以及作出何种反应）</p></li><li><p>同步（事件实现顺序的详细说明）</p></li></ul></li></ul></li><li><p>6.五层协议模型以及各层的功能#已完善 </p><ul><li><p>应用层：通过应用进程间的交互来完成特定网络应用。DNS、SMTP、HTTP等；</p></li><li><p>运输层：负责向两台主机中进程之间的通信提供通用的数据传输服务；TCP、UDP等；</p></li><li><p>网络层：负责为分组交换网上的不同主机提供通信服务。</p></li><li><p>数据链路层：将网络层传输下来的IP数据报组装成帧，在两个相邻节点间的链路传输帧；</p></li><li><p>物理层：透明地传输比特流；</p></li></ul></li><li><p>7.数据传输模式#已完善 </p><ul><li><p>若按数据传输的顺序可以分为并行传输和串行传输；</p></li><li><p>若按数据传输的同步方式可分为同步传输和异步传输；</p></li><li><p>若按数据传输的流向和时间关系可以分为单工、半双工和全双工数据传输。</p></li></ul></li><li><p>8.比特率和波特率#已完善 </p><ul><li><p>一个码元并不一定对应一个比特。</p></li><li><p>波特率：是<a class="link"   href="https://baike.baidu.com/item/%E7%A0%81%E5%85%83%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87/6305673?fromModule=lemma_inlink" >码元传输速率<i class="fas fa-external-link-alt"></i></a>单位，他说明单位时间传输了多少个码元。Baud/s</p></li><li><p>比特率：是信息量传送速率单位，即每秒传输<a class="link"   href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BB%A3%E7%A0%81/4879654?fromModule=lemma_inlink" >二进制代码<i class="fas fa-external-link-alt"></i></a>位数。bit/s</p></li></ul></li><li><p>9.奈奎斯特准则、香农公式</p><ul><li><p>奈奎斯特准则：在带宽为W（Hz）的低通信道中，若不考虑噪声干扰，则码元的最高速率是2W（码元每秒）。传输速率超过此上限，就会出现严重的码间串扰，使接收端对码元的判决（识别）成为不可能。</p><ul><li>习题<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/a6581a27-f3fb-4976-896f-9434586d9529-14724662.jpg"                      alt="img"                ><img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/e43b5115-c533-4165-8a74-6067ed869be6-14724662.jpg"                      alt="img"                ></li></ul></li><li><p>香农公式：C=W*log_2(1+S/N) </p></li></ul></li><li><p>10.信道复用技术#已完善 </p><ul><li><p>频分复用（FDM）：使用调制的方法，把各路信号搬到适当的频率位置，彼此之间不产生干扰；各路信号在同样的时间占用不同的带宽资源。</p><ul><li>习题<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/3f62f87a-5211-4ca4-9063-502459140dc8-14724662.jpg"                      alt="img"                ></li></ul></li><li><p>时分复用（TDM）：将时间划分成一段段等长的TDM帧，每路信号占用TDM中一个序号固定的时隙，每路信号所占用的时隙周期性的出现；各路信号在不同的时间使用同样的频带宽度。</p></li><li><p>统计时分复用（STDM）：为提高线路资源的利用率提出了统计时分复用，这是一种改进了的时分复用，每个STDM帧的时隙动态分配，并且小于连接在集中器上的用户数</p></li><li><p>波分复用（WDM）：光的频分复用；各路信号在同样的时间里占用不同的波长资源。</p></li><li><p>码分复用（CDM）：每个比特时间再划分成m个短的间隔，每个站分配相互正交的码片序列，当发送数据1时候就发送码片序列的源码，否则就发送码片序列的反码。某站T想要接收来自站点S的信号，T所接受信号是各个站所发送的码片序列之和，根据叠加定理，求规格化内积得到的结果是：所有其他站的信号都被过滤掉，而只剩下S站所发送的信号。当S站发送的是比特1时，内积结果是+1；当S站发送的是比特0时，内积结果是-1；</p><ul><li>习题<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/0d0a15c8-acf6-4b78-acfb-a51cde68c5c0-14724662.jpg"                      alt="img"                ></li></ul></li></ul></li><li><p>11.停止-等待协议的工作原理#已完善 </p><ul><li><p>教材P220 5.4 可靠传输的工作原理</p></li><li><p>停止等待就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p></li><li><p>三种情况</p><ul><li><p>无差错情况：发送完一个分组之后，停止发送，在收到接收方发来的确认后，再继续发送。</p></li><li><p>出现差错情况：两种出错状况：分组丢失或者分组出错。这种情况接收方不进行任何操作。发送方的超时计时器超时之后，对此分组进行超时重传。</p><ul><li><p>要注意：1.发送方需要暂时保留分组的副本，当收到确认之后才将其删除。</p></li><li><p>2.分组和确认分组都必须进行编号，明确分组是否收到了确认。</p></li><li><p>3.超时计时器设置的重传时间应当比数据在分组中传输的平均往返时间要长。</p></li></ul></li><li><p>确认丢失和确认迟到</p><ul><li><p>发送方在设定的时间内没有收到确认，此时无法得知是分组丢失、差错，或者是接收方的确认丢失或者超时。此时发送方将分组进行重发。</p></li><li><p>接收方二次收到这个分组后，采取以下两个动作：1.丢弃这个分组，并且不在向上层进行交付；2.向A发送确认。</p></li><li><p>发送方在收到二次确认之后，收下就丢弃，什么也不做。</p></li></ul></li></ul></li><li><p>基于上述的确认的确认和重传机制。我们就可以在不可靠的传输网络上实现可靠的通信。这种可靠传输协议尝尝被称为自动重传请求（ARP）。</p></li><li><p>上述的协议有一个很大的缺点就是：信道的利用率太低。基于此，提出了连续ARQ协议，或称为滑动窗口协议<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/f4eb09a4-3836-4733-894b-daf4dc7cbdc8-14724662.jpg"                      alt="img"                ></p></li><li><p>位于发送方的滑动窗口内的分组都可以连续发送出去，并且在收到一个分组的时候，滑动窗口向前移动一个分组。但是接收方一般采用连续确认的方式，好处是接收方不必逐个发送确认，但是在中间的分组丢失时候会将前面已经接收成功的分组再次发送一遍（回退 Go back N）。</p></li></ul></li><li><p>12.IP地址分类编址，A、B、C网络数量和主机数量，IP地址的规则，子网掩码，子网划分，子网数量#需要再次复习 </p><ul><li><p>网络数量和主机数量：</p><ul><li><p>A类：网络位是8位（第一位固定为0，后7位全0表示本网络；后7位全1表示环回测试，用来给本机的进程之间的通信用，总共可以表示2^7-2个网络号），主机位是24位（全0表示网络地址，全1表示该网络上的所有主机号（广播地址），共2^24-2个地址）1-126</p></li><li><p>B类：网络号是16位（前两位固定为10，B类地址共有2^14个，主机号有2^16-2个）128.000–191.255</p></li><li><p>C类：网络号是32位（前三位固定为110，C类地址共有2^30个，主机号有2^8-2=126个）192.0.0-223.255.255</p></li><li><p>D类：网络号前面4位是1110，后面用作多播地址；</p></li><li><p>E类：网络号前面4位是1111，后面保留今后使用；</p></li></ul></li><li><p>IP地址的规则</p><ul><li>网络号加主机号，分类如上</li></ul></li><li><p>子网划分：在主机号中插入一个子网号，变成一个三级IP地址。</p></li><li><p>子网掩码又称地址掩码，由一连串1和一连串0构成，1的长度就是网络前缀的长度</p></li><li><p>子网数量:2的子网掩码0的个数幂。</p></li><li><p>IP地址的特点：</p><ul><li><p>1.每一个IP地址都有网络前缀和主机号两部分组成；</p></li><li><p>2.实际上IP地址是标志一台主机（或路由器）和一条链路的接口；</p></li><li><p>3.用转发器或交换机连接起来的若干局域网仍然为一个网络。</p></li><li><p>4.所有分配到网络前缀的网络都是平等的。</p></li></ul></li></ul></li><li><p>13.邮件收发协议 #看到这 </p><ul><li><p>考点 ：SMTP和POP3分别运用在什么情况？</p><ul><li><p>参考回答</p><ul><li><p>源自：P329 倒数第3点</p></li><li><p>从用户代理把邮件传送到邮件服务器，以及在邮件服务器之间的传送，都要使用SMTP协议。但用户代理从邮件服务器读取邮件时，则要使用POP3协议。</p></li></ul></li><li><p>相关的知识点</p><ul><li><p>一个电子邮件系统应该具有三部分组成：用户代理、邮件服务器、以及邮件发送协议（STMP，Simple Mail Transfer Protocol ）和邮件读取协议（POP3，Post Office Protocol - Version 3，邮局协议版本3）</p></li><li><p>SMTP和POP3都是使用TCP来传输邮件的，使用TCP的目的是为了可靠地传送邮件。</p></li><li><p>示意图：<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/1669958714957e430.jpg"                      alt="img"                ></p></li></ul></li></ul></li></ul></li><li><p>14.协议和服务有何区别？有何关系？#已完善 </p><ul><li><p>协议是控制对等实体之间的通信的规则，是水平的。服务是下层通过层间接口向上层提供的功能，是垂直的。</p></li><li><p>协议的实现保证了能够向上一层提供服务，要实现本层协议还需要使用下层提供的服务</p></li></ul></li><li><p>15.直接交付和间接交付各用在什么场合？</p><ul><li><p>直接交付：分组的终点和分组的发送接口在同一个IP网络中；</p></li><li><p>间接交付：分组的终点和分组的发送接口在不同的IP网络中；</p></li><li><p>判别：终点IP和发送端掩码、发送端IP和发送端掩码分别做位与运算，看结果是否相同，如果相同，则为直接交付；否则为间接交付。</p></li><li><p>交付操作：地址映射：IP地址 —&gt; 物理地址。这里要用到ARP（地址解析协议：知道IP地址，解析得到MAC地址）</p></li></ul></li><li><p>16.请简要描述TCP运输连接中的三个阶段。#已完善 </p><ul><li><p>一共三个阶段：连接建立、数据传送、连接释放。</p></li><li><p>主动发起TCP连接建立的应用进程叫做客户，而被动等待连接建立的应用进程的叫做服务器。</p></li><li><p>连接建立：</p><p>TCP的连接建立采用三报文握手机制。服务器要确认客户的连接请求，然后客户要对服务器的确认进行确认。</p><ul><li><p>示意图<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/8a31b345-d6c2-4164-9195-34b94b8e43eb-14724662.jpg"                      alt="img"                ></p></li><li><p>主要解决以下三个问题：使每一方能够确知对方的存在；允许双方协商一些参数（如最大窗口值，是否使用窗口扩大选项和时间戳选项）；能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。</p></li><li><p>三报文握手建立TCP连接</p></li></ul></li><li><p>数据传送</p></li><li><p>连接释放：</p><p>TCP的连接释放采用四报文握手机制。任何一方都可以在数据传送结束后发出连接释放的请求，对方确认后进入半关闭状态。当另外一方也没有数据要发送的时候，则发送连接释放通知，对方确认后就完全关闭了TCP连接。</p><ul><li>示意图<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/4b8a26d8-65df-4e8d-984d-65b431f9eccf-14724662.jpg"                      alt="img"                ></li></ul></li></ul></li><li><p>17.简述分组交换的特点和不足。#已完善 </p><ul><li><p>特点：</p><ul><li><p>1.节点暂时存储的是一个个分组，而不是整个数据文件；</p></li><li><p> 2.分组暂时保存在节点的内存中，保证了较高的交换速率；</p></li><li><p> 3.动态分配信道，极大的提高了通信线路的利用率。 </p></li></ul></li><li><p>不足：</p><ul><li><p> 1.分组在节点转发时因排队造成一定的延时</p></li><li><p>2.分组必须携带一些控制信息而产生额外开销，管理控制比较困难</p></li></ul></li><li><p>拓展–分组交换的要点：</p><ul><li><p>存储转发、分段重组、独立选路。</p></li><li><p>思路：如何分组（报文、等长数据块、控制信息）如何独立选路（源\目的地址、独立选择控制路径） 如何存储转发（路由器功能、查找转发表、多次存储转发、交付目的主机） 如何重组（目的主机完成分段重组、还原成为原始报文）</p></li></ul></li></ul></li><li><p>18.根据接受到的信息以及生成多项式判断该码是否误码#已完善 </p><ul><li><p>教材P76</p></li><li><p>循环冗余检验，CRC：把收到的每一个帧都除以同样的除数P（模2运算），然后检查得到的余数R。如果余数不为0则误码。</p></li><li><p>一般用生成多项式P(x)来表示P，广泛使用的生成多项式有这几种：CRC-16、CRC-CCITT、CRC-32</p></li><li><p>学习通相关例题：</p><ul><li>图片<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/dadeabbd-3c30-4c77-8649-12e4f12b6c97-14724662.jpg"                      alt="img"                ></li></ul></li><li><p>余数的计算：</p><ul><li>图片<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/9dfb2665-dafe-4808-af1c-b169d87243c2-14724662.jpg"                      alt="img"                ></li></ul></li></ul></li><li><p>19.已经各站点ABC通过CDMA共享电路，站点的码片序列分别已经（正交）。若某站点C从电路上收到的序列，则C收到其他站点发送的数据。#已完善 </p><ul><li><p>CDMA： Code Division Multiplexing Access 码分多址，具体见到第10点：码分复用</p></li><li><p>相关题目<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/bf44aab5-778c-41e4-a544-2cbff9e6e503-14724662.jpg"                      alt="img"                ></p></li><li><p>解答参考<img                       lazyload                     alt="image"                     data-src="https://api2.mubu.com/v3/document_image/17bd16c5-fe01-426b-8524-0459f49ee589-14724662.jpg"                      alt="img"                ></p></li></ul></li><li><p>20.拥塞控制协议（四种算法）</p><ul><li><p>教材P241 TCP的拥塞控制方法/P243 变化图</p></li><li><p>共有四种：慢开始（窗口数加倍）、拥塞避免（窗口数自加一）、快重传（3-ACK后–说明丢包了，被丢失的包立即进行重传）、快恢复（快重传后启动快恢复，窗口值变为原来的一半，之后执行拥塞避免算法）</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注释：根据软工的画的重点，罗列了相关知识点和部分习题，时间仓促，难免有小差错，望联系指正！&lt;/p&gt;</summary>
    
    
    
    <category term="考试复习" scheme="http://example.com/categories/%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考试复习" scheme="http://example.com/tags/%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/02/03/hello-world/"/>
    <id>http://example.com/2023/02/03/hello-world/</id>
    <published>2023-02-02T19:00:58.282Z</published>
    <updated>2023-02-02T17:28:21.541Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
